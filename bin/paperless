#!/usr/bin/env ruby
require 'gli'
require 'yaml'
require 'paperless'

# Set the path to the CocoaDialog.app and openmeta
COCOADIALOG = File.dirname(__FILE__) +'/CocoaDialog.app/Contents/MacOS/CocoaDialog'
OPENMETA = File.dirname(__FILE__) +'/openmeta'

include GLI::App

program_desc 'A command-line interface for Paperless workflows that apply rules in order to auto-sort notes into notebooks/folders.'

version Paperless::VERSION

config_file 'paperless.rules.yaml'

desc 'Only print what would be done. Nothing actually gets modified.'
switch :simulate, :negatable => false, :default_value => false

desc 'The name of the app to OCR pdf documents (pdfpen|pdfpenpro|none)'
default_value 'none'
arg_name 'OCR App'
flag :ocr_engine

desc 'A list of file extenstions that will be treated as text when added to services like Evernote.'
default_value 'txt md mmd'
arg_name 'Text extensions'
flag :text_ext

desc 'Do not use.'
flag :rules

desc 'The path to a new rules file. If not defined, the global rules from the config file will be used.'
arg_name 'Rules file'
flag :rules_file

desc 'The application where the document will be added to.'
default_value 'evernote'
arg_name 'Services'
flag :service

desc 'The default format for the date when inserted using <date> variable.'
default_value '%Y-%m-%d'
arg_name 'Date Format'
flag :date_format

desc 'The locale format of the date: "us" or "euro"'
default_value 'us'
arg_name 'Date Locale'
flag :date_locale

desc 'If the date cannot be discovered within the doucment contents, then use "filedate" or "today" as the default.'
default_value 'filedate'
arg_name 'Date Default'
flag :date_default

desc 'Default destination to add notes into'
default_value 'Inbox'
arg_name 'Notebook'
flag :destination

pre do |global_options,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  global_options[:text_ext] = global_options[:text_ext].split

  # Load new rules file is passed
  if global_options[:rules_file]
    if File.exists?(File.expand_path global_options[:rules_file]) 
      yaml = YAML.load File.expand_path global_options[:rules_file]
      global_options[:rules] = yaml[:rules]
    end
  end

  # puts global_options.inspect
  true
end

post do |global_options,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only

  # Run Sync if its requested
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling

  puts "There was an error processing the command."
  true
end

# Assign Command
desc 'Edit the configuration file in TextEdit'
command :editconfig do |c|

  c.action do |global_options,options,args|
    system("open -a TextEdit ~/paperless.rules.yaml")
  end
end


# Append Command
# desc 'Append data to the end of an existing note.'
# arg_name 'note_name'
# command :append do |c|

#   c.action do |global_options,options,args|

#   end
# end

# Assign Command
desc 'Assign a tag to an existing note. (Not yet implemented)'
arg_name 'tag_name', :multiple
command :assign do |c|

  c.action do |global_options,options,args|

  end
end

# Create Command
desc 'Create a new note from a file'
arg_name 'file_name'
command :create do |c|

  c.desc 'Dump the OCR text for the document to the terminal.'
  c.switch :dump, :negatable => false, :default_value => false

  c.desc 'Open a prompt to rename the file before its processed through the rules.'
  c.switch :prompt, :negatable => false, :default_value => false

  c.desc 'Process the file through the rules.'
  c.switch :proc_rules, :default_value => true

  c.desc 'Delete the original file after its been imported into the target service.'
  c.switch :delete, :default_value => true

  c.desc 'OCR the document if it is a PDF'
  c.switch :ocr, :negatable => false, :default_value => false

  c.action do |global_options,options,args|

    args.each do |file|

      if File.exists?(File.expand_path file) && !File.directory?(File.expand_path file)
        file = File.expand_path file
      else
        raise "File does not exist or is a directory (#{file})"
      end

      old_filename = nil

      if options[:prompt]
        file_ext = File.extname(file)
        filename = File.basename(file, file_ext)
        user_input = `#{COCOADIALOG} standard-inputbox --title "Paperless Prompt" --informative-text "Rename your file before its processed with rules..." --text "#{filename}" --no-newline --string-output`.split("\n")

        if user_input[0].match(/ok/i) && user_input[1] != File.basename(file, file_ext)
          new_filename = File.join(File.dirname(file), user_input[1] + file_ext)
          puts "Renaming file based on input to #{new_filename}"
          if global_options[:simulate]
            # save the file name to rename it back later
            old_filename = file
          end
          File.rename(file, new_filename) 
          file = new_filename
        end
      end

      engine = Paperless::Engine.new({
        :file                => file,
        :ocr_engine          => global_options[:ocr_engine],
        :text_ext            => global_options[:text_ext],
        :default_destination => global_options[:destination],
        :date_format         => global_options[:date_format],
        :date_locale         => global_options[:date_locale],
        :date_default        => global_options[:date_default],
        :default_service     => global_options[:service],
        :rules               => global_options[:rules]
      })

      file_ext = File.extname(file).gsub(/\./,'')
      if file_ext == Paperless::PDF_EXT && options[:ocr]
        puts "OCRing file..."
        engine.ocr(options[:dump])
      end

      if options[:proc_rules]
        puts "Processing rules..."
        engine.process_rules 
      end

      if global_options[:simulate]
        puts "Simulating changes..."
        engine.print

        if global_options[:simulate] && options[:prompt] && !old_filename.nil?
          puts "Renaming file back to #{old_filename}"
          File.rename(file, old_filename) 
        end
      else
        puts "Saving #{file} to #{engine.service}"
        engine.create({:delete => options[:delete]})
      end
    end
  end
end

# Info Command
# desc 'Get Evernote account Info'
# arg_name 'note_name'
# command :info do |c|

#   c.action do |global_options,options,args|

#   end
# end

# Search Command
desc 'Search for a note in Evernote and perform actions on them. (Not yet implemented)'
arg_name 'note_name'
command :search do |c|

  c.action do |global_options,options,args|

  end
end

# Unassign Command
desc 'Remove tags from a note. (Not yet implemented)'
arg_name 'note_name'
command :unassign do |c|

  c.action do |global_options,options,args|

  end
end

exit run(ARGV)
